<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cryptoPairAdded" xml:space="preserve">
    <value>✅ New monitoring task has been created.\nDetails of your task:\n{0}</value>
  </data>
  <data name="helpMsg" xml:space="preserve">
    <value>Brief information about this bot: 
This bot is written on Python3 with pyTelegramBotApi library.
This bot uses realtime binance exchange rates!
⛏ Developer: Ironshell
🛸 Github: https://github.com/IronShell1207/CryCurMonitorBot
My web: https://droidapps.cf/en/
If bot is usefull for you, you can buy my a ☕️ and thx 2u).
\n🥇ETH: 0xa35fbab442da4e65413045a4b9b147e2a0fc3e0c\n🎈LTC: LQiBdMeCNWAcSBEhc2QT3ffFz8a2t7zPcG</value>
  </data>
  <data name="newPairAfterExchangeSetPrice" xml:space="preserve">
    <value>Exchange for new crypto pair setted. Set price in next message</value>
  </data>
  <data name="newPairRequestingForPair" xml:space="preserve">
    <value>For creating new monitoring task, send me crypto pair with following next format of message with this message attached:
BASE/QUOTE or BASE QUOTE
Example: BTC/USDT or BTC USDT</value>
  </data>
  <data name="newPairWrongPrice" xml:space="preserve">
    <value>Wrong price. Try again</value>
  </data>
  <data name="subscribedSucs" xml:space="preserve">
    <value>You are successfully subscribed to breakout notifications. Current settings: {0}. </value>
  </data>
  <data name="noCryptoTasks" xml:space="preserve">
    <value>You don't have any tasks yet. To add new send /create</value>
  </data>
  <data name="cryptoPairRemoved" xml:space="preserve">
    <value>Crypto pair {0} id {1} removed from monitoring!</value>
  </data>
  <data name="ToaddToTheBlackList" xml:space="preserve">
    <value>To add new pair to the black list send it with this message attached using next format: BTC/USDT or BTC USDT</value>
  </data>
  <data name="welcomeMsg" xml:space="preserve">
    <value>Hello! I'm crypto currency exchange monitor bot. I can send you 💬 notification when your currency is raise 📉 or fall 📈 to setted value 💰.
For example, you need to know when Bitcoin hits the $ 40,000 mark. 
To do this, press the 'Create 📊' button and send the bot either the name of the 'BTC' coin and select a pair from the options offered, or send the 'BTC/USDT' pair at once in this format.
After that, the bot will ask you to indicate the price point that you want to know about. 
You send the bot a number, for example 40000. After that, the bot will send you information about the newly created task. 
You can view all tasks by clicking on the 'List of tasks 📝' button. 
As soon as the price of this pair reaches the target mark, you will immediately receive a notification from the bot for each of the added pairs. 
You can also edit, turn off or turn off the task at any time. 

For create new task 🖍 send: /createtask.
For get info 📋 send: /info
For get all available commands 🔎 send: /help</value>
  </data>
  <data name="blacklistPairAdded" xml:space="preserve">
    <value>Pair {0} added to the black list for breakout bot.</value>
  </data>
  <data name="blacklistPairExists" xml:space="preserve">
    <value>Pair {0} already exists in the black list.</value>
  </data>
  <data name="CPCantFindAnyPairsMatching" xml:space="preserve">
    <value>I can't find any pairs matching your request!</value>
  </data>
  <data name="cryptoPairCantRemove" xml:space="preserve">
    <value>I can't remove your pair because of some problems!</value>
  </data>
  <data name="cryptoPairRemoveBySymbol" xml:space="preserve">
    <value>Select task you needed to remove from your tasks</value>
  </data>
  <data name="CPEditPair" xml:space="preserve">
    <value>To edit price of {0} pair with id {1} please send new price with this message attached!</value>
  </data>
  <data name="CPEditbySymbol" xml:space="preserve">
    <value>Select task you need to edit</value>
  </data>
  <data name="CPEditTaskComplete" xml:space="preserve">
    <value>🖍Task edited successfully:

{0}</value>
  </data>
  <data name="CPEditTaskCreated" xml:space="preserve">
    <value>🖍Task created successfully:

</value>
  </data>
  <data name="CPEditEmpty" xml:space="preserve">
    <value>To edit any task send command with task id or symbol name. For example: /edit 210 34000 or /edit BTC/USDT or /edit BTC</value>
  </data>
  <data name="CPRemoveEmpty" xml:space="preserve">
    <value>To remove any task send command with task id or symbol name. For example: /remove 51 or /remove BTC/USDT or /remove ETH</value>
  </data>
  <data name="CPAddComment" xml:space="preserve">
    <value>To add comment for task with id {0} for pair {1} send your comment in next message with this attached.</value>
  </data>
  <data name="CPShowTasks" xml:space="preserve">
    <value>There is your tasks with matching request: </value>
  </data>
</root>