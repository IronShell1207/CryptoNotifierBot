@page "/userconfig/{userid}"

<PageTitle>Users</PageTitle>


@using CryptoBotWebPortal.Data
@using CryptoApi.Objects
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Mvc.RazorPages
@using TelegramBot.Objects
@inject WeatherForecastService ForecastService

@functions
{
    TimeOnly TimeStartProxy 
    { get => TimeOnly.FromTimeSpan(user.Item1.NightModeStartTime); set
        {
            user.Item1.NightModeStartTime = value.ToTimeSpan();
        }
    }
    TimeOnly TimeEndProxy 
    { get => TimeOnly.FromTimeSpan(user.Item1.NightModeEndsTime); set
        {
        
        user.Item1.NightModeEndsTime = value.ToTimeSpan();
        }
    }
}

@if (AlertVisible)
{
    <div class="alert alert-success fade show">
        <strong> @AlertMessage </strong>
    </div>
}

<tr style="border: 0px; ">
    <td  style="border: 0px; "> 
        <div id="userconfig">
            <h1>User's @user.Item1.Id config</h1>
            <h5>User telegram id: @user.Item1.TelegramId</h5>
            <h5>Username: @user.Item1.UserName</h5>
            <h5>Nickname: @user.Item1.FirstName</h5>
            <h5>User pairs @user.Item1.pairs.Count </h5>
            <h5><Tumbler  @bind-IsEnabled="@user.Item1.TriggerOneTasksByDefault" Text="Trigger once for new tasks by default"></Tumbler></h5>
                @if (user.Item1.pairs?.Count > 0)
                {
                    <a style="margin: 10px 5px" type="button" class="btn btn-primary" href="/usertasks/@user.Item1.Id">Show tasks list</a>
                } 
            <h5>Language <input type="text" @bind="user.Item1.Language" style="max-width: 150px"/></h5>
            <h5>Notification timeout <input type="number" @bind="user.Item1.NoticationsInterval" style="max-width: 95px"/></h5>
                <h5><label class="cl-switch">
                    <input type="checkbox" @bind="user.Item1.NightModeEnable">
                    <span class="switcher">
                    </span><span class="label">Night mode</span>
                </label></h5>
                <h5>Night mode start time 
                    <input type="time" @bind="TimeStartProxy" style="max-width: 120px"/> 
                    <input type="time" @bind="TimeEndProxy" style="max-width: 120px"/> </h5>
            <h5><label class="cl-switch"><input type="checkbox" @bind="user.Item1.DisplayTaskEditButtonsInNotifications" ><span class="switcher"></span><span class="label">Display tasks edit buttons in notifications</span></label></h5>
            <h5><label class="cl-switch"><input type="checkbox" @bind="user.Item1.ShowMarketEvents" ><span class="switcher"></span><span class="label">Show market events</span></label></h5>
            <h5><label class="cl-switch"><input type="checkbox" @bind="user.Item1.AntifloodIntervalAmplification" ><span class="switcher"></span><span class="label">Anti flood timeout auto amplification</span></label></h5>
            <h5><label class="cl-switch"><input type="checkbox" @bind="user.Item1.NotesEnable" ><span class="switcher"></span><span class="label">Show tips in notifications</span></label></h5>
            <h5><label class="cl-switch"><input type="checkbox" @bind="user.Item1.RemoveLatestNotifyBeforeNew" ><span class="switcher"></span><span class="label">Remove latest notify before sending new one</span></label></h5>
            <h5 style="max-width: 377px">Morning prices changes report (set 0 to disable or time in minutes when to notify you)</h5>
                <input type="text" @bind="user.Item1.MorningReport" style="max-width: 120px"/>
                <h5 style="max-width: 377px">Timezone</h5>
                <input type="text" @bind="user.Item1.TimezoneChange" style="max-width: 80px"/>
        </div>
    </td>
   
    <td style="border: 0px;">
        @if (user.Item2 != null)
        {
            <div id="breakoutConfig" style="margin-left: 30px; align-self: center">
                <h1>Breakouts settings:</h1>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.Subscribed"> <span class="switcher"></span> <span class="label">Subscription status</span></label></h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.BlackListEnable"> <span class="switcher"></span> <span class="label">Black/white list parsing enable</span></label></h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.WhitelistInsteadBlack"> <span class="switcher"></span> <span class="label">White list instead black</span></label></h5>
            
                <h5>Platforms subscription:</h5>
                <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.BinanceSub"> <span class="switcher"></span> <span class="label">Binance</span></label>
                <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.BitgetSub"> <span class="switcher"></span> <span class="label">Bitget</span></label>
                <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.OkxSub"> <span class="switcher"></span> <span class="label">Okx</span></label>
                <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.KucoinSub"> <span class="switcher"></span> <span class="label">Kucoin</span></label>
                <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.GateioSub"> <span class="switcher"></span> <span class="label">GateIO</span></label>
                <h5>Timings subscription:</h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S2MinUpdates"> <span class="switcher"></span> <span class="label">2 mins updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S5MinUpdates"> <span class="switcher"></span> <span class="label">5 mins updates</span></label> </h5>
                <h5> <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S15MinUpdates"> <span class="switcher"></span> <span class="label">15 mins updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S30MinUpdates"> <span class="switcher"></span> <span class="label">30 mins updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S45MinUpdates"> <span class="switcher"></span> <span class="label">45 mins updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S60MinUpdates"> <span class="switcher"></span> <span class="label">60 mins updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S120MinUpdates"> <span class="switcher"></span> <span class="label">2 hours updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S240MinUpdates"> <span class="switcher"></span> <span class="label">4 hours updates</span></label> </h5>
                <h5> <label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S480MinUpdates"> <span class="switcher"></span> <span class="label">8 hours updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S960MinUpdates"> <span class="switcher"></span> <span class="label">16 hours updates</span></label> </h5>
                <h5><label class="cl-switch"> <input type="checkbox" @bind="user.Item2.S1920MinUpdates"> <span class="switcher"></span> <span class="label">32 hours updates</span></label></h5>

                <div class="container" style="width: 380px; height: 400px; overflow: auto; position: relative;">
                    <h2 class="fs-5 fw-semibold">Black listed pairs count: @user.Item2.BlackListedPairsList.Count</h2>
                    <div class="list-group" >
                        @foreach (var brkpair in user.Item2.BlackListedPairsList)
                        {
                            <li href="#" class="list-group-item">@brkpair.ToString() 
                                <button type="button" class="btn btn-primary btn-xs" @onclick="@(() =>  RemoveFromList(brkpair) )">Remove

                                </button></li>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <h4>You are not subscribed to breakouts notifications. To subscribe send /subscribe in chat</h4>
        }
    </td>
    <td>
        <h1>Monitoring tasks</h1>
        @if (user.Item3 != null)
        {
        <div class="container" style="width: 380px; height: 400px; overflow: auto; position: relative;">
            <h2 class="fs-5 fw-semibold">Mon listed pairs count: @user.Item3.Count</h2>
            <h5 style="max-width: 377px">Monitoring interval</h5>
            <input type="text" @bind="user.Item1.MonInterval" style="max-width: 80px"/>
            <div class="list-group">
                @foreach (var monPair in user.Item3)
                {
                    <li href="#" class="list-group-item">@monPair.ToString()
                        <button type="button" class="btn btn-primary btn-xs" @onclick="@(() => RemoveMonTask(monPair))">Remove

                        </button></li>
                }
            </div>
        </div>
        }
    </td>
    
</tr>
<p/>
<button type="button" style="margin: 0 auto;" class="btn btn-primary"  @onclick="SaveChanges">Save changes</button>

@code {
    private (UserConfig, BreakoutSub, List<MonObj>) user;

    [Parameter]
    public string userid { get; set; }

    public bool AlertVisible { get; set; }
    public string AlertMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
    // user = await ForecastService.userconfigGET(int.Parse(userid));
    }

    private async Task SaveChanges()
    {
       // var result = await ForecastService.SaveUserSettings(user.Item1, user.Item2);
       // AlertMessage = result.Item2;
       // AlertVisible = true;
       // await Task.Delay(1500);
       
       // AlertVisible = false;
    }

    private async Task RemoveFromList(BlackListedPairs pair)
    {
      //  var result = await ForecastService.RemovePairFromBL(user.Item2, pair);
       // user.Item2?.BlackListedPairsList?.Remove(pair);
      //  AlertMessage = result.Item2;
       // AlertVisible = true;
       // await Task.Delay(1500);
       // AlertVisible = false;
    }

    private async Task RemoveMonTask(MonObj mon)
    {
       // var result = await ForecastService.RemoveMonPair(mon);
       // AlertMessage = "Pair removed";
      //  AlertVisible = true;
//await Task.Delay(1500);
     //   AlertVisible = false;
    }
}
