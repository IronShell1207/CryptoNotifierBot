@page "/taskedit/{taskID}"

<PageTitle>Users</PageTitle>


@using CryptoBotWebPortal.Data
@using CryptoApi.Objects

@using Microsoft.AspNetCore.Mvc.RazorPages
@using TelegramBot.Objects
@inject WeatherForecastService ForecastService
@inject NavigationManager NavigationManager


@if (AlertVisible)
{
    <div class="alert alert-success fade show">
        <strong> @AlertMessage </strong>
    </div>
}
<h1>Task @StringToHtml(@pair.ToStringWithLink()) edit:</h1>
<div id="taskedit">
    <h5>User id: @user.Id</h5>
    <h5>User telegram id: @user.TelegramId</h5>
    <h5>Pair info</h5>
   <p>Pair base: <input type="text" name="symbol" @bind="pair.PairBase"/></p>
    <p>Pair quote: <input type="text" name="symbol" @bind="pair.PairQuote"/></p>

    <h5>Price trigger: <input type="text" @bind="pair.Price"/></h5>

    <h5><label class="cl-switch"><input type="checkbox" @bind="pair.Enabled" ><span class="switcher"></span><span class="label">Task active</span></label></h5>
    <h5><label class="cl-switch"><input type="checkbox" @bind="pair.GainOrFall" ><span class="switcher"></span><span class="label">Rise or fall of trigger price</span></label></h5>
    <h5><label class="cl-switch"><input type="checkbox" @bind="pair.TriggerOnce" ><span class="switcher"></span><span class="label">Trigger once (when price hits trigger you get notified once without flood)</span></label></h5>

    <h5>Exchange platform <select @bind="pair.ExchangePlatform">
        <option value="Binance">Binance</option>
        <option value="Bitget">Bitget</option>
        <option value="Okx">Okx</option>
        <option value="Kucoin">Kucoin</option>
        <option value="GateIO">GateIO</option>
    </select></h5>
    
    
    <h5>Note <input type="text" @value="pair.Note"/></h5>
    
    <p></p>
    <input type="button" @onclick="SaveSettings" value="Save changes"/>

</div>

@code {

    public bool AlertVisible { get; set; }
    public string AlertMessage { get; set; }


    private UserConfig? user { get; set; }
    private CryptoPair? pair { get; set; }
    [Parameter] 
    public string taskID { get; set; }
    protected override async Task OnInitializedAsync()
    {
       // pair = await ForecastService.GetUserCPSetts(int.Parse(taskID));
       //user = pair.User;
    }

    private async Task SaveSettings()
    {
       //var result = await ForecastService.SaveTaskSettings(pair);
       // AlertVisible = true;
       //AlertMessage = result.Item2;

    }
    private MarkupString StringToHtml(string line)
    {
            return (MarkupString) line;
    }

}